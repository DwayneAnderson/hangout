{"version":3,"sources":["components/Die/index.jsx","components/DiceSet/index.jsx","components/App/index.jsx","serviceWorker.js","index.js"],"names":["Die","render","props","rolling","value","saved","onClick","className","Component","refreshDice","_","random","DiceSet","state","rollIndex","dice","map","die","i","key","onDieClick","rollDice","disabled","onNextTurn","setState","setTimeout","App","scoreboardUrl","URLSearchParams","window","location","search","get","src","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d92dbc3f.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './style.scss'\n\nclass Die extends Component {\n  render = () => {\n    const {rolling, value, saved, onClick} = this.props\n    return rolling && !saved\n    ? <div className=\"Die Die-Rolling\"></div>\n    : <div\n        className={`Die Die-${value} ${saved ? 'saved' : ''}`}\n        onClick={onClick}\n      >\n        {value}\n      </div>\n  }\n}\n\nexport default Die","import React, {Component} from 'react'\nimport Die from './../Die'\nimport _ from 'lodash'\nimport './style.scss'\n\nconst freshDice = [\n  {saved: false, value: _.random(1, 6)},\n  {saved: false, value: _.random(1, 6)},\n  {saved: false, value: _.random(1, 6)},\n  {saved: false, value: _.random(1, 6)},\n  {saved: false, value: _.random(1, 6)},\n]\n\nconst refreshDice = () => {\n  return [\n    {saved: false, value: _.random(1, 6)},\n    {saved: false, value: _.random(1, 6)},\n    {saved: false, value: _.random(1, 6)},\n    {saved: false, value: _.random(1, 6)},\n    {saved: false, value: _.random(1, 6)},\n  ]\n}\n\n\nclass DiceSet extends Component {\n  state = {\n    rolling: true,\n    rollIndex: 0,\n    dice: refreshDice(),\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        rolling: false,\n      })\n    }, 2000)\n  }\n\n  render = () => {\n    const {rolling, rollIndex, dice} = this.state\n\n    return (\n      <div className=\"DiceSet\">\n        <div className={`DiceSet-Roll ${rollIndex === 2 ? 'last' : ''}`}>Roll {rollIndex + 1}</div>\n        <div className=\"DiceSet-Dice\">\n          {dice.map((die, i) => <Die\n            key={i}\n            value={die.value}\n            saved={die.saved}\n            rolling={rolling}\n            onClick={() => {this.onDieClick(i)}}\n          />)}\n        </div>\n        <div className=\"DiceSet-Buttons\">\n          <button onClick={this.rollDice} disabled={rolling || rollIndex > 1}>\n            roll again!\n          </button>\n          {rollIndex == 2 && (\n            <button onClick={this.onNextTurn}>\n              next turn!\n            </button>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  onNextTurn = () => {\n    this.setState({\n      rolling: true,\n      rollIndex: -1,\n      dice: refreshDice(),\n    }, () => {\n      this.rollDice()\n    })\n  }\n\n  onDieClick = (i) => {\n    const dice = [...this.state.dice]\n    dice[i].saved = !dice[i].saved\n    this.setState({dice})\n  }\n\n  rollDice = () => {\n    const {rollIndex} = this.state\n    const dice = [...this.state.dice].map((die) => {\n      die.value = !die.saved ? _.random(1, 6) : die.value\n      return die\n    })\n    this.setState({\n      rolling: true,\n      rollIndex: rollIndex + 1,\n      dice,\n    }, () => {\n      setTimeout(() => {\n        this.setState({\n          rolling: false,\n        })\n      }, 500)\n    })\n  }\n}\n\nexport default DiceSet\n","import React, {Component} from 'react'\nimport DiceSet from './../DiceSet'\nimport './style.scss'\n\nclass App extends Component {\n  render = () => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const scoreboardUrl = urlParams.get('scoreboard')\n    return (\n      <div className=\"App\">\n        <DiceSet />\n        {scoreboardUrl &&  <iframe src={scoreboardUrl} />}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}